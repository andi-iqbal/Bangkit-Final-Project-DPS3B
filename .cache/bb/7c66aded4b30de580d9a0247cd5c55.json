{"id":"qwXy","dependencies":[{"name":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/src/exports_layers.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/package.json","includedInParent":true,"mtime":1592145407351},{"name":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/.babelrc","includedInParent":true,"mtime":1592144127903},{"name":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1592144801497},{"name":"./engine/input_layer","loc":{"line":10,"column":27},"parent":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/engine/input_layer.js"},{"name":"./engine/topology","loc":{"line":11,"column":22},"parent":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js"},{"name":"./exports","loc":{"line":12,"column":22},"parent":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports.js"},{"name":"./layers/advanced_activations","loc":{"line":13,"column":70},"parent":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/layers/advanced_activations.js"},{"name":"./layers/convolutional","loc":{"line":14,"column":99},"parent":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js"},{"name":"./layers/convolutional_depthwise","loc":{"line":15,"column":32},"parent":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_depthwise.js"},{"name":"./layers/core","loc":{"line":16,"column":111},"parent":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/layers/core.js"},{"name":"./layers/embeddings","loc":{"line":17,"column":26},"parent":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/layers/embeddings.js"},{"name":"./layers/merge","loc":{"line":18,"column":75},"parent":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/layers/merge.js"},{"name":"./layers/noise","loc":{"line":19,"column":61},"parent":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/layers/noise.js"},{"name":"./layers/normalization","loc":{"line":20,"column":55},"parent":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js"},{"name":"./layers/padding","loc":{"line":21,"column":30},"parent":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/layers/padding.js"},{"name":"./layers/pooling","loc":{"line":22,"column":199},"parent":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/layers/pooling.js"},{"name":"./layers/recurrent","loc":{"line":23,"column":102},"parent":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js"},{"name":"./layers/wrappers","loc":{"line":24,"column":47},"parent":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/hasanmubarok/Research/machine_learning/Bangkit-Final-Project/node_modules/@tensorflow/tfjs-layers/dist/layers/wrappers.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.inputLayer=d,exports.elu=w,exports.reLU=m,exports.leakyReLU=P,exports.prelu=v,exports.softmax=D,exports.thresholdedReLU=b,exports.conv1d=y,exports.conv2d=N,exports.conv2dTranspose=R,exports.conv3d=C,exports.separableConv2d=M,exports.cropping2D=L,exports.upSampling2d=q,exports.depthwiseConv2d=h,exports.activation=A,exports.dense=U,exports.dropout=S,exports.spatialDropout1d=G,exports.flatten=k,exports.repeatVector=z,exports.reshape=T,exports.permute=j,exports.embedding=O,exports.add=_,exports.average=B,exports.concatenate=E,exports.maximum=V,exports.minimum=F,exports.multiply=I,exports.dot=Z,exports.batchNormalization=H,exports.layerNormalization=J,exports.zeroPadding2d=K,exports.averagePooling1d=Q,exports.avgPool1d=W,exports.avgPooling1d=X,exports.averagePooling2d=Y,exports.avgPool2d=$,exports.avgPooling2d=ee,exports.averagePooling3d=ne,exports.avgPool3d=re,exports.avgPooling3d=oe,exports.globalAveragePooling1d=te,exports.globalAveragePooling2d=ue,exports.globalMaxPooling1d=ie,exports.globalMaxPooling2d=ae,exports.maxPooling1d=se,exports.maxPooling2d=le,exports.maxPooling3d=pe,exports.gru=ce,exports.gruCell=xe,exports.lstm=fe,exports.lstmCell=ge,exports.simpleRNN=de,exports.simpleRNNCell=we,exports.rnn=me,exports.stackedRNNCells=Pe,exports.bidirectional=ve,exports.timeDistributed=De,exports.gaussianNoise=Ce,exports.gaussianDropout=Me,exports.alphaDropout=Le,exports.masking=qe,Object.defineProperty(exports,\"Layer\",{enumerable:!0,get:function(){return n.Layer}}),Object.defineProperty(exports,\"input\",{enumerable:!0,get:function(){return r.input}}),Object.defineProperty(exports,\"RNN\",{enumerable:!0,get:function(){return f.RNN}}),Object.defineProperty(exports,\"RNNCell\",{enumerable:!0,get:function(){return f.RNNCell}}),exports.maxPool2d=exports.maxPool1d=exports.globalMaxPool2d=exports.globalMaxPool1d=void 0;var e=require(\"./engine/input_layer\"),n=require(\"./engine/topology\"),r=require(\"./exports\"),o=require(\"./layers/advanced_activations\"),t=require(\"./layers/convolutional\"),u=require(\"./layers/convolutional_depthwise\"),i=require(\"./layers/core\"),a=require(\"./layers/embeddings\"),s=require(\"./layers/merge\"),l=require(\"./layers/noise\"),p=require(\"./layers/normalization\"),c=require(\"./layers/padding\"),x=require(\"./layers/pooling\"),f=require(\"./layers/recurrent\"),g=require(\"./layers/wrappers\");function d(n){return new e.InputLayer(n)}function w(e){return new o.ELU(e)}function m(e){return new o.ReLU(e)}function P(e){return new o.LeakyReLU(e)}function v(e){return new o.PReLU(e)}function D(e){return new o.Softmax(e)}function b(e){return new o.ThresholdedReLU(e)}function y(e){return new t.Conv1D(e)}function N(e){return new t.Conv2D(e)}function R(e){return new t.Conv2DTranspose(e)}function C(e){return new t.Conv3D(e)}function M(e){return new t.SeparableConv2D(e)}function L(e){return new t.Cropping2D(e)}function q(e){return new t.UpSampling2D(e)}function h(e){return new u.DepthwiseConv2D(e)}function A(e){return new i.Activation(e)}function U(e){return new i.Dense(e)}function S(e){return new i.Dropout(e)}function G(e){return new i.SpatialDropout1D(e)}function k(e){return new i.Flatten(e)}function z(e){return new i.RepeatVector(e)}function T(e){return new i.Reshape(e)}function j(e){return new i.Permute(e)}function O(e){return new a.Embedding(e)}function _(e){return new s.Add(e)}function B(e){return new s.Average(e)}function E(e){return new s.Concatenate(e)}function V(e){return new s.Maximum(e)}function F(e){return new s.Minimum(e)}function I(e){return new s.Multiply(e)}function Z(e){return new s.Dot(e)}function H(e){return new p.BatchNormalization(e)}function J(e){return new p.LayerNormalization(e)}function K(e){return new c.ZeroPadding2D(e)}function Q(e){return new x.AveragePooling1D(e)}function W(e){return Q(e)}function X(e){return Q(e)}function Y(e){return new x.AveragePooling2D(e)}function $(e){return Y(e)}function ee(e){return Y(e)}function ne(e){return new x.AveragePooling3D(e)}function re(e){return ne(e)}function oe(e){return ne(e)}function te(e){return new x.GlobalAveragePooling1D(e)}function ue(e){return new x.GlobalAveragePooling2D(e)}function ie(e){return new x.GlobalMaxPooling1D(e)}function ae(e){return new x.GlobalMaxPooling2D(e)}function se(e){return new x.MaxPooling1D(e)}function le(e){return new x.MaxPooling2D(e)}function pe(e){return new x.MaxPooling3D(e)}function ce(e){return new f.GRU(e)}function xe(e){return new f.GRUCell(e)}function fe(e){return new f.LSTM(e)}function ge(e){return new f.LSTMCell(e)}function de(e){return new f.SimpleRNN(e)}function we(e){return new f.SimpleRNNCell(e)}function me(e){return new f.RNN(e)}function Pe(e){return new f.StackedRNNCells(e)}function ve(e){return new g.Bidirectional(e)}function De(e){return new g.TimeDistributed(e)}const be=ie;exports.globalMaxPool1d=be;const ye=ae;exports.globalMaxPool2d=ye;const Ne=se;exports.maxPool1d=Ne;const Re=le;function Ce(e){return new l.GaussianNoise(e)}function Me(e){return new l.GaussianDropout(e)}function Le(e){return new l.AlphaDropout(e)}function qe(e){return new i.Masking(e)}exports.maxPool2d=Re;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":20}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":35}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":43}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":56}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":57}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":64}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":68}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":76}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":87}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":89}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":97}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":101}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":103}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":111}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":116}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":118}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":126}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":136}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":138}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":146}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":152}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":154}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":162}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":170}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":172}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":180}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":196}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":198}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":206}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":213}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":215}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":223}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":230}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":232}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":240}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":256}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":258}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":266}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":273}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":275}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":283}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":299}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":301}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":309}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":320}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":322}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":330}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":343}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":345}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":353}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":369}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":371}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":379}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":390}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":392}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":400}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":406}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":408}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":416}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":424}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":426}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":434}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":451}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":453}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":461}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":469}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":471}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":479}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":492}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":494}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":502}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":510}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":512}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":520}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":528}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":530}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":538}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":548}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":550}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":558}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":562}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":564}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":572}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":580}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":582}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":590}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":602}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":604}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":612}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":620}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":622}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":630}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":638}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":640}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":648}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":657}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":659}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":667}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":671}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":673}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":681}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":700}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":702}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":710}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":729}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":731}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":739}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":753}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":755}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":763}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":780}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":782}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":790}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":800}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":802}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":810}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":823}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":825}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":833}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":850}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":852}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":860}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":870}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":872}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":880}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":893}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":896}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":904}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":921}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":924}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":932}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":942}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":945}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":953}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":966}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":969}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":977}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1000}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1003}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1011}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1034}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1037}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1045}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1064}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1067}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1075}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1094}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1097}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1105}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1118}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1121}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1129}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1142}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1145}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1153}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1166}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1169}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1177}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1181}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1184}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1192}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1200}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1203}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1211}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1216}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1219}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1227}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1236}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1239}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1247}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1257}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1260}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1268}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1282}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1285}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1293}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1297}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1300}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1308}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1324}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1327}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1335}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1349}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1352}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1360}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1376}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1379}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1387}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1401}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1404}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1412}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1428}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1431}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1439}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1452}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1455}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1463}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1471}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1474}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1481}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1496}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1504}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1512}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1513}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1525}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1527}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1531}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1542}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1549}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1551}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1560}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1567}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1582}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1590}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1598}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1599}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1611}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1613}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1617}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1628}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1635}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1637}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1646}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1653}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1668}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1676}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1682}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1683}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1695}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1697}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1701}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1712}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1719}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1721}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1728}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1735}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1750}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1758}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1768}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1769}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1781}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1783}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1787}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1798}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1805}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1807}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1818}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1826}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1836}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1844}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1854}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1862}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1878}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1886}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":1907}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":1,"column":1909}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":1,"column":1913}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":1,"column":1915}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":1,"column":1923}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":1,"column":1947}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":1,"column":1949}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":1,"column":1957}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":1,"column":1978}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":1,"column":1980}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":1,"column":1988}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":1,"column":2001}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":1,"column":2003}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":1,"column":2011}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":1,"column":2044}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":1,"column":2046}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":1,"column":2054}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":1,"column":2080}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":1,"column":2082}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":1,"column":2090}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":1,"column":2126}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":1,"column":2128}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":1,"column":2136}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":2153}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":2155}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":2163}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":1,"column":2186}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":1,"column":2188}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":1,"column":2196}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":2214}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":2216}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":2224}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":2242}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":2244}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":2252}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":2278}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":2280}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":2288}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":2308}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":2310}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":2318}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":2338}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":2340}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":2348}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":2370}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":2372}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":2380}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":65,"column":6},"generated":{"line":1,"column":2401}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":65,"column":16},"generated":{"line":1,"column":2410}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":65,"column":27},"generated":{"line":1,"column":2412}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":66,"column":9},"generated":{"line":1,"column":2415}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":66,"column":9},"generated":{"line":1,"column":2422}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":66,"column":13},"generated":{"line":1,"column":2426}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":66,"column":9},"generated":{"line":1,"column":2428}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":66,"column":24},"generated":{"line":1,"column":2439}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":96,"column":6},"generated":{"line":1,"column":2442}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":96,"column":16},"generated":{"line":1,"column":2451}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":96,"column":20},"generated":{"line":1,"column":2453}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":97,"column":9},"generated":{"line":1,"column":2456}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":97,"column":9},"generated":{"line":1,"column":2463}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":97,"column":13},"generated":{"line":1,"column":2467}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":97,"column":9},"generated":{"line":1,"column":2469}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":97,"column":17},"generated":{"line":1,"column":2473}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":118,"column":6},"generated":{"line":1,"column":2476}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":118,"column":16},"generated":{"line":1,"column":2485}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":118,"column":21},"generated":{"line":1,"column":2487}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":9},"generated":{"line":1,"column":2490}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":9},"generated":{"line":1,"column":2497}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":13},"generated":{"line":1,"column":2501}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":9},"generated":{"line":1,"column":2503}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":18},"generated":{"line":1,"column":2508}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":143,"column":6},"generated":{"line":1,"column":2511}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":143,"column":16},"generated":{"line":1,"column":2520}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":143,"column":26},"generated":{"line":1,"column":2522}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":144,"column":9},"generated":{"line":1,"column":2525}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":144,"column":9},"generated":{"line":1,"column":2532}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":144,"column":13},"generated":{"line":1,"column":2536}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":144,"column":9},"generated":{"line":1,"column":2538}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":144,"column":23},"generated":{"line":1,"column":2548}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":169,"column":6},"generated":{"line":1,"column":2551}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":169,"column":16},"generated":{"line":1,"column":2560}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":169,"column":22},"generated":{"line":1,"column":2562}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":170,"column":9},"generated":{"line":1,"column":2565}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":170,"column":9},"generated":{"line":1,"column":2572}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":170,"column":13},"generated":{"line":1,"column":2576}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":170,"column":9},"generated":{"line":1,"column":2578}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":170,"column":19},"generated":{"line":1,"column":2584}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":190,"column":6},"generated":{"line":1,"column":2587}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":190,"column":16},"generated":{"line":1,"column":2596}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":190,"column":24},"generated":{"line":1,"column":2598}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":191,"column":9},"generated":{"line":1,"column":2601}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":191,"column":9},"generated":{"line":1,"column":2608}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":191,"column":13},"generated":{"line":1,"column":2612}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":191,"column":9},"generated":{"line":1,"column":2614}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":191,"column":21},"generated":{"line":1,"column":2622}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":219,"column":6},"generated":{"line":1,"column":2625}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":219,"column":16},"generated":{"line":1,"column":2634}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":219,"column":32},"generated":{"line":1,"column":2636}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":220,"column":9},"generated":{"line":1,"column":2639}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":220,"column":9},"generated":{"line":1,"column":2646}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":220,"column":13},"generated":{"line":1,"column":2650}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":220,"column":9},"generated":{"line":1,"column":2652}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":220,"column":29},"generated":{"line":1,"column":2668}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":246,"column":6},"generated":{"line":1,"column":2671}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":246,"column":16},"generated":{"line":1,"column":2680}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":246,"column":23},"generated":{"line":1,"column":2682}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":247,"column":9},"generated":{"line":1,"column":2685}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":247,"column":9},"generated":{"line":1,"column":2692}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":247,"column":13},"generated":{"line":1,"column":2696}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":247,"column":9},"generated":{"line":1,"column":2698}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":247,"column":20},"generated":{"line":1,"column":2705}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":269,"column":6},"generated":{"line":1,"column":2708}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":269,"column":16},"generated":{"line":1,"column":2717}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":269,"column":23},"generated":{"line":1,"column":2719}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":270,"column":9},"generated":{"line":1,"column":2722}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":270,"column":9},"generated":{"line":1,"column":2729}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":270,"column":13},"generated":{"line":1,"column":2733}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":270,"column":9},"generated":{"line":1,"column":2735}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":270,"column":20},"generated":{"line":1,"column":2742}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":309,"column":6},"generated":{"line":1,"column":2745}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":309,"column":16},"generated":{"line":1,"column":2754}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":309,"column":32},"generated":{"line":1,"column":2756}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":310,"column":9},"generated":{"line":1,"column":2759}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":310,"column":9},"generated":{"line":1,"column":2766}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":310,"column":13},"generated":{"line":1,"column":2770}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":310,"column":9},"generated":{"line":1,"column":2772}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":310,"column":29},"generated":{"line":1,"column":2788}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":332,"column":6},"generated":{"line":1,"column":2791}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":332,"column":16},"generated":{"line":1,"column":2800}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":332,"column":23},"generated":{"line":1,"column":2802}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":333,"column":9},"generated":{"line":1,"column":2805}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":333,"column":9},"generated":{"line":1,"column":2812}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":333,"column":13},"generated":{"line":1,"column":2816}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":333,"column":9},"generated":{"line":1,"column":2818}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":333,"column":20},"generated":{"line":1,"column":2825}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":366,"column":6},"generated":{"line":1,"column":2828}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":366,"column":16},"generated":{"line":1,"column":2837}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":366,"column":32},"generated":{"line":1,"column":2839}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":367,"column":9},"generated":{"line":1,"column":2842}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":367,"column":9},"generated":{"line":1,"column":2849}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":367,"column":13},"generated":{"line":1,"column":2853}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":367,"column":9},"generated":{"line":1,"column":2855}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":367,"column":29},"generated":{"line":1,"column":2871}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":402,"column":6},"generated":{"line":1,"column":2874}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":402,"column":16},"generated":{"line":1,"column":2883}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":402,"column":27},"generated":{"line":1,"column":2885}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":403,"column":9},"generated":{"line":1,"column":2888}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":403,"column":9},"generated":{"line":1,"column":2895}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":403,"column":13},"generated":{"line":1,"column":2899}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":403,"column":9},"generated":{"line":1,"column":2901}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":403,"column":24},"generated":{"line":1,"column":2912}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":431,"column":6},"generated":{"line":1,"column":2915}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":431,"column":16},"generated":{"line":1,"column":2924}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":431,"column":29},"generated":{"line":1,"column":2926}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":432,"column":9},"generated":{"line":1,"column":2929}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":432,"column":9},"generated":{"line":1,"column":2936}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":432,"column":13},"generated":{"line":1,"column":2940}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":432,"column":9},"generated":{"line":1,"column":2942}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":432,"column":26},"generated":{"line":1,"column":2955}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":448,"column":6},"generated":{"line":1,"column":2958}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":448,"column":16},"generated":{"line":1,"column":2967}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":448,"column":32},"generated":{"line":1,"column":2969}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":449,"column":9},"generated":{"line":1,"column":2972}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":449,"column":9},"generated":{"line":1,"column":2979}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":449,"column":13},"generated":{"line":1,"column":2983}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":449,"column":9},"generated":{"line":1,"column":2985}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":449,"column":29},"generated":{"line":1,"column":3001}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":486,"column":6},"generated":{"line":1,"column":3004}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":486,"column":16},"generated":{"line":1,"column":3013}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":486,"column":27},"generated":{"line":1,"column":3015}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":487,"column":9},"generated":{"line":1,"column":3018}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":487,"column":9},"generated":{"line":1,"column":3025}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":487,"column":13},"generated":{"line":1,"column":3029}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":487,"column":9},"generated":{"line":1,"column":3031}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":487,"column":24},"generated":{"line":1,"column":3042}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":522,"column":6},"generated":{"line":1,"column":3045}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":522,"column":16},"generated":{"line":1,"column":3054}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":522,"column":22},"generated":{"line":1,"column":3056}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":523,"column":9},"generated":{"line":1,"column":3059}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":523,"column":9},"generated":{"line":1,"column":3066}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":523,"column":13},"generated":{"line":1,"column":3070}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":523,"column":9},"generated":{"line":1,"column":3072}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":523,"column":19},"generated":{"line":1,"column":3078}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":535,"column":6},"generated":{"line":1,"column":3081}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":535,"column":16},"generated":{"line":1,"column":3090}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":535,"column":24},"generated":{"line":1,"column":3092}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":536,"column":9},"generated":{"line":1,"column":3095}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":536,"column":9},"generated":{"line":1,"column":3102}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":536,"column":13},"generated":{"line":1,"column":3106}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":536,"column":9},"generated":{"line":1,"column":3108}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":536,"column":21},"generated":{"line":1,"column":3116}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":570,"column":6},"generated":{"line":1,"column":3119}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":570,"column":16},"generated":{"line":1,"column":3128}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":570,"column":33},"generated":{"line":1,"column":3130}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":571,"column":9},"generated":{"line":1,"column":3133}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":571,"column":9},"generated":{"line":1,"column":3140}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":571,"column":13},"generated":{"line":1,"column":3144}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":571,"column":9},"generated":{"line":1,"column":3146}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":571,"column":30},"generated":{"line":1,"column":3163}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":592,"column":6},"generated":{"line":1,"column":3166}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":592,"column":16},"generated":{"line":1,"column":3175}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":592,"column":24},"generated":{"line":1,"column":3177}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":593,"column":9},"generated":{"line":1,"column":3180}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":593,"column":9},"generated":{"line":1,"column":3187}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":593,"column":13},"generated":{"line":1,"column":3191}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":593,"column":9},"generated":{"line":1,"column":3193}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":593,"column":21},"generated":{"line":1,"column":3201}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":609,"column":6},"generated":{"line":1,"column":3204}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":609,"column":16},"generated":{"line":1,"column":3213}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":609,"column":29},"generated":{"line":1,"column":3215}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":610,"column":9},"generated":{"line":1,"column":3218}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":610,"column":9},"generated":{"line":1,"column":3225}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":610,"column":13},"generated":{"line":1,"column":3229}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":610,"column":9},"generated":{"line":1,"column":3231}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":610,"column":26},"generated":{"line":1,"column":3244}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":635,"column":6},"generated":{"line":1,"column":3247}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":635,"column":16},"generated":{"line":1,"column":3256}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":635,"column":24},"generated":{"line":1,"column":3258}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":636,"column":9},"generated":{"line":1,"column":3261}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":636,"column":9},"generated":{"line":1,"column":3268}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":636,"column":13},"generated":{"line":1,"column":3272}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":636,"column":9},"generated":{"line":1,"column":3274}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":636,"column":21},"generated":{"line":1,"column":3282}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":666,"column":6},"generated":{"line":1,"column":3285}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":666,"column":16},"generated":{"line":1,"column":3294}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":666,"column":24},"generated":{"line":1,"column":3296}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":667,"column":9},"generated":{"line":1,"column":3299}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":667,"column":9},"generated":{"line":1,"column":3306}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":667,"column":13},"generated":{"line":1,"column":3310}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":667,"column":9},"generated":{"line":1,"column":3312}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":667,"column":21},"generated":{"line":1,"column":3320}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":680,"column":6},"generated":{"line":1,"column":3323}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":680,"column":16},"generated":{"line":1,"column":3332}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":680,"column":26},"generated":{"line":1,"column":3334}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":681,"column":9},"generated":{"line":1,"column":3337}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":681,"column":9},"generated":{"line":1,"column":3344}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":681,"column":13},"generated":{"line":1,"column":3348}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":681,"column":9},"generated":{"line":1,"column":3350}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":681,"column":23},"generated":{"line":1,"column":3360}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":705,"column":6},"generated":{"line":1,"column":3363}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":705,"column":16},"generated":{"line":1,"column":3372}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":705,"column":20},"generated":{"line":1,"column":3374}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":706,"column":9},"generated":{"line":1,"column":3377}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":706,"column":9},"generated":{"line":1,"column":3384}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":706,"column":13},"generated":{"line":1,"column":3388}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":706,"column":9},"generated":{"line":1,"column":3390}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":706,"column":17},"generated":{"line":1,"column":3394}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":726,"column":6},"generated":{"line":1,"column":3397}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":726,"column":16},"generated":{"line":1,"column":3406}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":726,"column":24},"generated":{"line":1,"column":3408}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":727,"column":9},"generated":{"line":1,"column":3411}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":727,"column":9},"generated":{"line":1,"column":3418}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":727,"column":13},"generated":{"line":1,"column":3422}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":727,"column":9},"generated":{"line":1,"column":3424}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":727,"column":21},"generated":{"line":1,"column":3432}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":749,"column":6},"generated":{"line":1,"column":3435}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":749,"column":16},"generated":{"line":1,"column":3444}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":749,"column":28},"generated":{"line":1,"column":3446}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":750,"column":9},"generated":{"line":1,"column":3449}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":750,"column":9},"generated":{"line":1,"column":3456}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":750,"column":13},"generated":{"line":1,"column":3460}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":750,"column":9},"generated":{"line":1,"column":3462}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":750,"column":25},"generated":{"line":1,"column":3474}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":770,"column":6},"generated":{"line":1,"column":3477}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":770,"column":16},"generated":{"line":1,"column":3486}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":770,"column":24},"generated":{"line":1,"column":3488}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":771,"column":9},"generated":{"line":1,"column":3491}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":771,"column":9},"generated":{"line":1,"column":3498}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":771,"column":13},"generated":{"line":1,"column":3502}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":771,"column":9},"generated":{"line":1,"column":3504}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":771,"column":21},"generated":{"line":1,"column":3512}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":791,"column":6},"generated":{"line":1,"column":3515}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":791,"column":16},"generated":{"line":1,"column":3524}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":791,"column":24},"generated":{"line":1,"column":3526}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":9},"generated":{"line":1,"column":3529}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":9},"generated":{"line":1,"column":3536}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":13},"generated":{"line":1,"column":3540}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":9},"generated":{"line":1,"column":3542}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":21},"generated":{"line":1,"column":3550}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":813,"column":6},"generated":{"line":1,"column":3553}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":813,"column":16},"generated":{"line":1,"column":3562}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":813,"column":25},"generated":{"line":1,"column":3564}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":814,"column":9},"generated":{"line":1,"column":3567}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":814,"column":9},"generated":{"line":1,"column":3574}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":814,"column":13},"generated":{"line":1,"column":3578}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":814,"column":9},"generated":{"line":1,"column":3580}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":814,"column":22},"generated":{"line":1,"column":3589}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":838,"column":6},"generated":{"line":1,"column":3592}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":838,"column":16},"generated":{"line":1,"column":3601}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":838,"column":20},"generated":{"line":1,"column":3603}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":839,"column":9},"generated":{"line":1,"column":3606}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":839,"column":9},"generated":{"line":1,"column":3613}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":839,"column":13},"generated":{"line":1,"column":3617}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":839,"column":9},"generated":{"line":1,"column":3619}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":839,"column":17},"generated":{"line":1,"column":3623}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":866,"column":6},"generated":{"line":1,"column":3626}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":866,"column":16},"generated":{"line":1,"column":3635}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":866,"column":35},"generated":{"line":1,"column":3637}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":867,"column":9},"generated":{"line":1,"column":3640}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":867,"column":9},"generated":{"line":1,"column":3647}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":867,"column":13},"generated":{"line":1,"column":3651}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":867,"column":9},"generated":{"line":1,"column":3653}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":867,"column":32},"generated":{"line":1,"column":3672}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":891,"column":6},"generated":{"line":1,"column":3675}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":891,"column":16},"generated":{"line":1,"column":3684}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":891,"column":35},"generated":{"line":1,"column":3686}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":9},"generated":{"line":1,"column":3689}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":9},"generated":{"line":1,"column":3696}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":13},"generated":{"line":1,"column":3700}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":9},"generated":{"line":1,"column":3702}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":32},"generated":{"line":1,"column":3721}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":918,"column":6},"generated":{"line":1,"column":3724}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":918,"column":16},"generated":{"line":1,"column":3733}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":918,"column":30},"generated":{"line":1,"column":3735}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":919,"column":9},"generated":{"line":1,"column":3738}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":919,"column":9},"generated":{"line":1,"column":3745}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":919,"column":13},"generated":{"line":1,"column":3749}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":919,"column":9},"generated":{"line":1,"column":3751}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":919,"column":27},"generated":{"line":1,"column":3765}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":934,"column":6},"generated":{"line":1,"column":3768}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":934,"column":16},"generated":{"line":1,"column":3777}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":934,"column":33},"generated":{"line":1,"column":3779}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":935,"column":9},"generated":{"line":1,"column":3782}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":935,"column":9},"generated":{"line":1,"column":3789}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":935,"column":13},"generated":{"line":1,"column":3793}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":935,"column":9},"generated":{"line":1,"column":3795}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":935,"column":30},"generated":{"line":1,"column":3812}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":937,"column":6},"generated":{"line":1,"column":3815}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":937,"column":16},"generated":{"line":1,"column":3824}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":937,"column":26},"generated":{"line":1,"column":3826}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":938,"column":9},"generated":{"line":1,"column":3829}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":938,"column":9},"generated":{"line":1,"column":3836}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":938,"column":26},"generated":{"line":1,"column":3838}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":942,"column":6},"generated":{"line":1,"column":3841}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":942,"column":16},"generated":{"line":1,"column":3850}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":942,"column":29},"generated":{"line":1,"column":3852}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":943,"column":9},"generated":{"line":1,"column":3855}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":943,"column":9},"generated":{"line":1,"column":3862}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":943,"column":26},"generated":{"line":1,"column":3864}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":968,"column":6},"generated":{"line":1,"column":3867}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":968,"column":16},"generated":{"line":1,"column":3876}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":968,"column":33},"generated":{"line":1,"column":3878}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":969,"column":9},"generated":{"line":1,"column":3881}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":969,"column":9},"generated":{"line":1,"column":3888}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":969,"column":13},"generated":{"line":1,"column":3892}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":969,"column":9},"generated":{"line":1,"column":3894}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":969,"column":30},"generated":{"line":1,"column":3911}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":971,"column":6},"generated":{"line":1,"column":3914}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":971,"column":16},"generated":{"line":1,"column":3923}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":971,"column":26},"generated":{"line":1,"column":3925}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":972,"column":9},"generated":{"line":1,"column":3928}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":972,"column":9},"generated":{"line":1,"column":3935}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":972,"column":26},"generated":{"line":1,"column":3937}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":976,"column":6},"generated":{"line":1,"column":3940}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":976,"column":16},"generated":{"line":1,"column":3949}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":976,"column":29},"generated":{"line":1,"column":3952}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":977,"column":9},"generated":{"line":1,"column":3955}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":977,"column":9},"generated":{"line":1,"column":3962}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":977,"column":26},"generated":{"line":1,"column":3964}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1000,"column":6},"generated":{"line":1,"column":3967}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1000,"column":16},"generated":{"line":1,"column":3976}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1000,"column":33},"generated":{"line":1,"column":3979}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1001,"column":9},"generated":{"line":1,"column":3982}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1001,"column":9},"generated":{"line":1,"column":3989}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1001,"column":13},"generated":{"line":1,"column":3993}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1001,"column":9},"generated":{"line":1,"column":3995}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1001,"column":30},"generated":{"line":1,"column":4012}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1003,"column":6},"generated":{"line":1,"column":4015}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1003,"column":16},"generated":{"line":1,"column":4024}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1003,"column":26},"generated":{"line":1,"column":4027}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1004,"column":9},"generated":{"line":1,"column":4030}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1004,"column":9},"generated":{"line":1,"column":4037}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1004,"column":26},"generated":{"line":1,"column":4040}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1008,"column":6},"generated":{"line":1,"column":4043}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1008,"column":16},"generated":{"line":1,"column":4052}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1008,"column":29},"generated":{"line":1,"column":4055}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1009,"column":9},"generated":{"line":1,"column":4058}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1009,"column":9},"generated":{"line":1,"column":4065}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1009,"column":26},"generated":{"line":1,"column":4068}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1020,"column":6},"generated":{"line":1,"column":4071}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1020,"column":16},"generated":{"line":1,"column":4080}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1020,"column":39},"generated":{"line":1,"column":4083}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1021,"column":9},"generated":{"line":1,"column":4086}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1021,"column":9},"generated":{"line":1,"column":4093}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1021,"column":13},"generated":{"line":1,"column":4097}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1021,"column":9},"generated":{"line":1,"column":4099}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1021,"column":36},"generated":{"line":1,"column":4122}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1037,"column":6},"generated":{"line":1,"column":4125}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1037,"column":16},"generated":{"line":1,"column":4134}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1037,"column":39},"generated":{"line":1,"column":4137}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1038,"column":9},"generated":{"line":1,"column":4140}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1038,"column":9},"generated":{"line":1,"column":4147}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1038,"column":13},"generated":{"line":1,"column":4151}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1038,"column":9},"generated":{"line":1,"column":4153}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1038,"column":36},"generated":{"line":1,"column":4176}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1049,"column":6},"generated":{"line":1,"column":4179}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1049,"column":16},"generated":{"line":1,"column":4188}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1049,"column":35},"generated":{"line":1,"column":4191}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1050,"column":9},"generated":{"line":1,"column":4194}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1050,"column":9},"generated":{"line":1,"column":4201}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1050,"column":13},"generated":{"line":1,"column":4205}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1050,"column":9},"generated":{"line":1,"column":4207}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1050,"column":32},"generated":{"line":1,"column":4226}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1066,"column":6},"generated":{"line":1,"column":4229}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1066,"column":16},"generated":{"line":1,"column":4238}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1066,"column":35},"generated":{"line":1,"column":4241}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1067,"column":9},"generated":{"line":1,"column":4244}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1067,"column":9},"generated":{"line":1,"column":4251}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1067,"column":13},"generated":{"line":1,"column":4255}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1067,"column":9},"generated":{"line":1,"column":4257}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1067,"column":32},"generated":{"line":1,"column":4276}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1078,"column":6},"generated":{"line":1,"column":4279}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1078,"column":16},"generated":{"line":1,"column":4288}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1078,"column":29},"generated":{"line":1,"column":4291}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1079,"column":9},"generated":{"line":1,"column":4294}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1079,"column":9},"generated":{"line":1,"column":4301}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1079,"column":13},"generated":{"line":1,"column":4305}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1079,"column":9},"generated":{"line":1,"column":4307}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1079,"column":26},"generated":{"line":1,"column":4320}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1102,"column":6},"generated":{"line":1,"column":4323}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1102,"column":16},"generated":{"line":1,"column":4332}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1102,"column":29},"generated":{"line":1,"column":4335}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1103,"column":9},"generated":{"line":1,"column":4338}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1103,"column":9},"generated":{"line":1,"column":4345}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1103,"column":13},"generated":{"line":1,"column":4349}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1103,"column":9},"generated":{"line":1,"column":4351}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1103,"column":26},"generated":{"line":1,"column":4364}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1126,"column":6},"generated":{"line":1,"column":4367}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1126,"column":16},"generated":{"line":1,"column":4376}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1126,"column":29},"generated":{"line":1,"column":4379}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1127,"column":9},"generated":{"line":1,"column":4382}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1127,"column":9},"generated":{"line":1,"column":4389}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1127,"column":13},"generated":{"line":1,"column":4393}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1127,"column":9},"generated":{"line":1,"column":4395}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1127,"column":26},"generated":{"line":1,"column":4408}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1154,"column":6},"generated":{"line":1,"column":4411}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1154,"column":16},"generated":{"line":1,"column":4420}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1154,"column":20},"generated":{"line":1,"column":4423}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1155,"column":9},"generated":{"line":1,"column":4426}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1155,"column":9},"generated":{"line":1,"column":4433}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1155,"column":13},"generated":{"line":1,"column":4437}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1155,"column":9},"generated":{"line":1,"column":4439}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1155,"column":17},"generated":{"line":1,"column":4443}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1202,"column":6},"generated":{"line":1,"column":4446}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1202,"column":16},"generated":{"line":1,"column":4455}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1202,"column":24},"generated":{"line":1,"column":4458}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1203,"column":9},"generated":{"line":1,"column":4461}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1203,"column":9},"generated":{"line":1,"column":4468}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1203,"column":13},"generated":{"line":1,"column":4472}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1203,"column":9},"generated":{"line":1,"column":4474}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1203,"column":21},"generated":{"line":1,"column":4482}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1228,"column":6},"generated":{"line":1,"column":4485}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1228,"column":16},"generated":{"line":1,"column":4494}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1228,"column":21},"generated":{"line":1,"column":4497}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1229,"column":9},"generated":{"line":1,"column":4500}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1229,"column":9},"generated":{"line":1,"column":4507}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1229,"column":13},"generated":{"line":1,"column":4511}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1229,"column":9},"generated":{"line":1,"column":4513}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1229,"column":18},"generated":{"line":1,"column":4518}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1276,"column":6},"generated":{"line":1,"column":4521}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1276,"column":16},"generated":{"line":1,"column":4530}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1276,"column":25},"generated":{"line":1,"column":4533}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1277,"column":9},"generated":{"line":1,"column":4536}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1277,"column":9},"generated":{"line":1,"column":4543}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1277,"column":13},"generated":{"line":1,"column":4547}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1277,"column":9},"generated":{"line":1,"column":4549}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1277,"column":22},"generated":{"line":1,"column":4558}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1303,"column":6},"generated":{"line":1,"column":4561}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1303,"column":16},"generated":{"line":1,"column":4570}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1303,"column":26},"generated":{"line":1,"column":4573}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1304,"column":9},"generated":{"line":1,"column":4576}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1304,"column":9},"generated":{"line":1,"column":4583}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1304,"column":13},"generated":{"line":1,"column":4587}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1304,"column":9},"generated":{"line":1,"column":4589}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1304,"column":23},"generated":{"line":1,"column":4599}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1351,"column":6},"generated":{"line":1,"column":4602}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1351,"column":16},"generated":{"line":1,"column":4611}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1351,"column":30},"generated":{"line":1,"column":4614}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1352,"column":9},"generated":{"line":1,"column":4617}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1352,"column":9},"generated":{"line":1,"column":4624}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1352,"column":13},"generated":{"line":1,"column":4628}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1352,"column":9},"generated":{"line":1,"column":4630}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1352,"column":27},"generated":{"line":1,"column":4644}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1414,"column":6},"generated":{"line":1,"column":4647}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1414,"column":16},"generated":{"line":1,"column":4656}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1414,"column":20},"generated":{"line":1,"column":4659}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1415,"column":9},"generated":{"line":1,"column":4662}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1415,"column":9},"generated":{"line":1,"column":4669}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1415,"column":13},"generated":{"line":1,"column":4673}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1415,"column":9},"generated":{"line":1,"column":4675}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1415,"column":17},"generated":{"line":1,"column":4679}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1424,"column":6},"generated":{"line":1,"column":4682}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1424,"column":16},"generated":{"line":1,"column":4691}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1424,"column":32},"generated":{"line":1,"column":4694}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1425,"column":9},"generated":{"line":1,"column":4697}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1425,"column":9},"generated":{"line":1,"column":4704}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1425,"column":13},"generated":{"line":1,"column":4708}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1425,"column":9},"generated":{"line":1,"column":4710}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1425,"column":29},"generated":{"line":1,"column":4726}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1431,"column":6},"generated":{"line":1,"column":4729}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1431,"column":16},"generated":{"line":1,"column":4738}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1431,"column":30},"generated":{"line":1,"column":4741}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1432,"column":9},"generated":{"line":1,"column":4744}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1432,"column":9},"generated":{"line":1,"column":4751}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1432,"column":13},"generated":{"line":1,"column":4755}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1432,"column":9},"generated":{"line":1,"column":4757}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1432,"column":27},"generated":{"line":1,"column":4771}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1480,"column":6},"generated":{"line":1,"column":4774}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1480,"column":16},"generated":{"line":1,"column":4783}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1480,"column":32},"generated":{"line":1,"column":4786}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1481,"column":9},"generated":{"line":1,"column":4789}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1481,"column":9},"generated":{"line":1,"column":4796}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1481,"column":13},"generated":{"line":1,"column":4800}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1481,"column":9},"generated":{"line":1,"column":4802}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1481,"column":29},"generated":{"line":1,"column":4818}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1485,"column":7},"generated":{"line":1,"column":4821}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1485,"column":13},"generated":{"line":1,"column":4827}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1485,"column":31},"generated":{"line":1,"column":4830}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":4833}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":4841}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":4857}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1486,"column":7},"generated":{"line":1,"column":4860}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1486,"column":13},"generated":{"line":1,"column":4866}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1486,"column":31},"generated":{"line":1,"column":4869}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":4872}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":4880}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":4896}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1487,"column":7},"generated":{"line":1,"column":4899}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1487,"column":13},"generated":{"line":1,"column":4905}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1487,"column":25},"generated":{"line":1,"column":4908}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":4911}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":4919}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":4929}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1488,"column":7},"generated":{"line":1,"column":4932}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1488,"column":13},"generated":{"line":1,"column":4938}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1488,"column":25},"generated":{"line":1,"column":4941}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1514,"column":6},"generated":{"line":1,"column":4944}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1514,"column":16},"generated":{"line":1,"column":4953}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1514,"column":30},"generated":{"line":1,"column":4956}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1515,"column":9},"generated":{"line":1,"column":4959}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1515,"column":9},"generated":{"line":1,"column":4966}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1515,"column":13},"generated":{"line":1,"column":4970}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1515,"column":9},"generated":{"line":1,"column":4972}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1515,"column":27},"generated":{"line":1,"column":4986}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1542,"column":6},"generated":{"line":1,"column":4989}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1542,"column":16},"generated":{"line":1,"column":4998}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1542,"column":32},"generated":{"line":1,"column":5001}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1543,"column":9},"generated":{"line":1,"column":5004}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1543,"column":9},"generated":{"line":1,"column":5011}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1543,"column":13},"generated":{"line":1,"column":5015}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1543,"column":9},"generated":{"line":1,"column":5017}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1543,"column":29},"generated":{"line":1,"column":5033}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1576,"column":6},"generated":{"line":1,"column":5036}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1576,"column":16},"generated":{"line":1,"column":5045}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1576,"column":29},"generated":{"line":1,"column":5048}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1577,"column":9},"generated":{"line":1,"column":5051}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1577,"column":9},"generated":{"line":1,"column":5058}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1577,"column":13},"generated":{"line":1,"column":5062}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1577,"column":9},"generated":{"line":1,"column":5064}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1577,"column":26},"generated":{"line":1,"column":5077}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1602,"column":6},"generated":{"line":1,"column":5080}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1602,"column":16},"generated":{"line":1,"column":5089}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1602,"column":24},"generated":{"line":1,"column":5092}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1603,"column":9},"generated":{"line":1,"column":5095}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1603,"column":9},"generated":{"line":1,"column":5102}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1603,"column":13},"generated":{"line":1,"column":5106}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1603,"column":9},"generated":{"line":1,"column":5108}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1603,"column":21},"generated":{"line":1,"column":5116}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":5119}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":5127}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1,"column":5137}}],"sources":{"../src/exports_layers.ts":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {InputLayer, InputLayerArgs} from './engine/input_layer';\nimport {Layer, LayerArgs} from './engine/topology';\nimport {input} from './exports';\nimport {ELU, ELULayerArgs, LeakyReLU, LeakyReLULayerArgs, PReLU, PReLULayerArgs, ReLU, ReLULayerArgs, Softmax, SoftmaxLayerArgs, ThresholdedReLU, ThresholdedReLULayerArgs} from './layers/advanced_activations';\nimport {Conv1D, Conv2D, Conv2DTranspose, Conv3D, ConvLayerArgs, Cropping2D, Cropping2DLayerArgs, SeparableConv2D, SeparableConvLayerArgs, UpSampling2D, UpSampling2DLayerArgs} from './layers/convolutional';\nimport {DepthwiseConv2D, DepthwiseConv2DLayerArgs} from './layers/convolutional_depthwise';\nimport {Activation, ActivationLayerArgs, Dense, DenseLayerArgs, Dropout, DropoutLayerArgs, Flatten, FlattenLayerArgs, Masking, MaskingArgs, Permute, PermuteLayerArgs, RepeatVector, RepeatVectorLayerArgs, Reshape, ReshapeLayerArgs, SpatialDropout1D, SpatialDropout1DLayerConfig} from './layers/core';\nimport {Embedding, EmbeddingLayerArgs} from './layers/embeddings';\nimport {Add, Average, Concatenate, ConcatenateLayerArgs, Dot, DotLayerArgs, Maximum, Minimum, Multiply} from './layers/merge';\nimport {AlphaDropout, AlphaDropoutArgs, GaussianDropout, GaussianDropoutArgs, GaussianNoise, GaussianNoiseArgs} from './layers/noise';\nimport {BatchNormalization, BatchNormalizationLayerArgs, LayerNormalization, LayerNormalizationLayerArgs} from './layers/normalization';\nimport {ZeroPadding2D, ZeroPadding2DLayerArgs} from './layers/padding';\nimport {AveragePooling1D, AveragePooling2D, AveragePooling3D, GlobalAveragePooling1D, GlobalAveragePooling2D, GlobalMaxPooling1D, GlobalMaxPooling2D, GlobalPooling2DLayerArgs, MaxPooling1D, MaxPooling2D, MaxPooling3D, Pooling1DLayerArgs, Pooling2DLayerArgs, Pooling3DLayerArgs} from './layers/pooling';\nimport {GRU, GRUCell, GRUCellLayerArgs, GRULayerArgs, LSTM, LSTMCell, LSTMCellLayerArgs, LSTMLayerArgs, RNN, RNNCell, RNNLayerArgs, SimpleRNN, SimpleRNNCell, SimpleRNNCellLayerArgs, SimpleRNNLayerArgs, StackedRNNCells, StackedRNNCellsArgs} from './layers/recurrent';\nimport {Bidirectional, BidirectionalLayerArgs, TimeDistributed, WrapperLayerArgs} from './layers/wrappers';\n\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n\n// Input Layer.\n/**\n * An input layer is an entry point into a `tf.LayersModel`.\n *\n * `InputLayer` is generated automatically for `tf.Sequential`` models by\n * specifying the `inputshape` or `batchInputShape` for the first layer.  It\n * should not be specified explicitly. However, it can be useful sometimes,\n * e.g., when constructing a sequential model from a subset of another\n * sequential model's layers. Like the code snippet below shows.\n *\n * ```js\n * // Define a model which simply adds two inputs.\n * const model1 = tf.sequential();\n * model1.add(tf.layers.dense({inputShape: [4], units: 3, activation: 'relu'}));\n * model1.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n * model1.summary();\n * model1.predict(tf.zeros([1, 4])).print();\n *\n * // Construct another model, reusing the second layer of `model1` while\n * // not using the first layer of `model1`. Note that you cannot add the second\n * // layer of `model` directly as the first layer of the new sequential model,\n * // because doing so will lead to an error related to the fact that the layer\n * // is not an input layer. Instead, you need to create an `inputLayer` and add\n * // it to the new sequential model before adding the reused layer.\n * const model2 = tf.sequential();\n * // Use an inputShape that matches the input shape of `model1`'s second\n * // layer.\n * model2.add(tf.layers.inputLayer({inputShape: [3]}));\n * model2.add(model1.layers[1]);\n * model2.summary();\n * model2.predict(tf.zeros([1, 3])).print();\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Inputs', namespace: 'layers'} */\nexport function inputLayer(args: InputLayerArgs): Layer {\n  return new InputLayer(args);\n}\n\n// Advanced Activation Layers.\n\n/**\n * Exponetial Linear Unit (ELU).\n *\n * It follows:\n * `f(x) =  alpha * (exp(x) - 1.) for x < 0`,\n * `f(x) = x for x >= 0`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Fast and Accurate Deep Network Learning by Exponential Linear Units\n * (ELUs)](https://arxiv.org/abs/1511.07289v1)\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function elu(args?: ELULayerArgs): Layer {\n  return new ELU(args);\n}\n\n/**\n * Rectified Linear Unit activation function.\n *\n * Input shape:\n *   Arbitrary. Use the config field `inputShape` (Array of integers, does\n *   not include the sample axis) when using this layer as the first layer\n *   in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function reLU(args?: ReLULayerArgs): Layer {\n  return new ReLU(args);\n}\n\n/**\n * Leaky version of a rectified linear unit.\n *\n * It allows a small gradient when the unit is not active:\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function leakyReLU(args?: LeakyReLULayerArgs): Layer {\n  return new LeakyReLU(args);\n}\n\n/**\n * Parameterized version of a leaky rectified linear unit.\n *\n * It follows\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n * wherein `alpha` is a trainable weight.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function prelu(args?: PReLULayerArgs): Layer {\n  return new PReLU(args);\n}\n\n/**\n * Softmax activation layer.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function softmax(args?: SoftmaxLayerArgs): Layer {\n  return new Softmax(args);\n}\n\n/**\n * Thresholded Rectified Linear Unit.\n *\n * It follows:\n * `f(x) = x for x > theta`,\n * `f(x) = 0 otherwise`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Zero-Bias Autoencoders and the Benefits of Co-Adapting\n * Features](http://arxiv.org/abs/1402.3337)\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function thresholdedReLU(args?: ThresholdedReLULayerArgs): Layer {\n  return new ThresholdedReLU(args);\n}\n\n// Convolutional Layers.\n\n/**\n * 1D convolution layer (e.g., temporal convolution).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input over a single spatial (or temporal) dimension\n * to produce a tensor of outputs.\n *\n * If `use_bias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model, provide an\n * `inputShape` argument `Array` or `null`.\n *\n * For example, `inputShape` would be:\n * - `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors\n * - `[null, 128]` for variable-length sequences of 128-dimensional vectors.\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional',  namespace: 'layers'}\n */\nexport function conv1d(args: ConvLayerArgs): Layer {\n  return new Conv1D(args);\n}\n\n/**\n * 2D convolution layer (e.g. spatial convolution over images).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures\n * in `dataFormat='channelsLast'`.\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv2d(args: ConvLayerArgs): Layer {\n  return new Conv2D(args);\n}\n\n/**\n * Transposed convolutional layer (sometimes called Deconvolution).\n *\n * The need for transposed convolutions generally arises\n * from the desire to use a transformation going in the opposite direction of\n * a normal convolution, i.e., from something that has the shape of the output\n * of some convolution to something that has the shape of its input while\n * maintaining a connectivity pattern that is compatible with said\n * convolution.\n *\n * When using this layer as the first layer in a model, provide the\n * configuration `inputShape` (`Array` of integers, does not include the\n * sample axis), e.g., `inputShape: [128, 128, 3]` for 128x128 RGB pictures in\n * `dataFormat: 'channelsLast'`.\n *\n * Input shape:\n *   4D tensor with shape:\n *   `[batch, channels, rows, cols]` if `dataFormat` is `'channelsFirst'`.\n *   or 4D tensor with shape\n *   `[batch, rows, cols, channels]` if `dataFormat` is `'channelsLast`.\n *\n * Output shape:\n *   4D tensor with shape:\n *   `[batch, filters, newRows, newCols]` if `dataFormat` is\n * `'channelsFirst'`. or 4D tensor with shape:\n *   `[batch, newRows, newCols, filters]` if `dataFormat` is `'channelsLast'`.\n *\n * References:\n *   - [A guide to convolution arithmetic for deep\n * learning](https://arxiv.org/abs/1603.07285v1)\n *   - [Deconvolutional\n * Networks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv2dTranspose(args: ConvLayerArgs): Layer {\n  return new Conv2DTranspose(args);\n}\n\n/**\n * 3D convolution layer (e.g. spatial convolution over volumes).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 128, 1]` for 128x128x128 grayscale volumes\n * in `dataFormat='channelsLast'`.\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv3d(args: ConvLayerArgs): Layer {\n  return new Conv3D(args);\n}\n\n/**\n * Depthwise separable 2D convolution.\n *\n * Separable convolution consists of first performing\n * a depthwise spatial convolution\n * (which acts on each input channel separately)\n * followed by a pointwise convolution which mixes together the resulting\n * output channels. The `depthMultiplier` argument controls how many\n * output channels are generated per input channel in the depthwise step.\n *\n * Intuitively, separable convolutions can be understood as\n * a way to factorize a convolution kernel into two smaller kernels,\n * or as an extreme version of an Inception block.\n *\n * Input shape:\n *   4D tensor with shape:\n *     `[batch, channels, rows, cols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, rows, cols, channels]` if data_format='channelsLast'.\n *\n * Output shape:\n *   4D tensor with shape:\n *     `[batch, filters, newRows, newCols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, newRows, newCols, filters]` if data_format='channelsLast'.\n *     `rows` and `cols` values might have changed due to padding.\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function separableConv2d(args: SeparableConvLayerArgs): Layer {\n  return new SeparableConv2D(args);\n}\n\n/**\n * Cropping layer for 2D input (e.g., image).\n *\n * This layer can crop an input\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, croppedRows, croppedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, croppedRows, croppedCols]`.\n *\n * Examples\n * ```js\n *\n * const model = tf.sequential();\n * model.add(tf.layers.cropping2D({cropping:[[2, 2], [2, 2]],\n *                                inputShape: [128, 128, 3]}));\n * //now output shape is [batch, 124, 124, 3]\n * ```\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function cropping2D(args: Cropping2DLayerArgs): Layer {\n  return new Cropping2D(args);\n}\n\n/**\n * Upsampling layer for 2D inputs.\n *\n * Repeats the rows and columns of the data\n * by size[0] and size[1] respectively.\n *\n *\n * Input shape:\n *    4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *         `[batch, rows, cols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *        `[batch, channels, rows, cols]`\n *\n * Output shape:\n *     4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *        `[batch, upsampledRows, upsampledCols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *         `[batch, channels, upsampledRows, upsampledCols]`\n *\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function upSampling2d(args: UpSampling2DLayerArgs): Layer {\n  return new UpSampling2D(args);\n}\n\n// Convolutional(depthwise) Layers.\n\n/**\n * Depthwise separable 2D convolution.\n *\n * Depthwise Separable convolutions consists in performing just the first step\n * in a depthwise spatial convolution (which acts on each input channel\n * separately). The `depthMultplier` argument controls how many output channels\n * are generated per input channel in the depthwise step.\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function depthwiseConv2d(args: DepthwiseConv2DLayerArgs): Layer {\n  return new DepthwiseConv2D(args);\n}\n\n// Basic Layers.\n\n/**\n * Applies an activation function to an output.\n *\n * This layer applies element-wise activation function.  Other layers, notably\n * `dense` can also apply activation functions.  Use this isolated activation\n * function to extract the values before and after the\n * activation. For instance:\n *\n * ```js\n * const input = tf.input({shape: [5]});\n * const denseLayer = tf.layers.dense({units: 1});\n * const activationLayer = tf.layers.activation({activation: 'relu6'});\n *\n * // Obtain the output symbolic tensors by applying the layers in order.\n * const denseOutput = denseLayer.apply(input);\n * const activationOutput = activationLayer.apply(denseOutput);\n *\n * // Create the model based on the inputs.\n * const model = tf.model({\n *     inputs: input,\n *     outputs: [denseOutput, activationOutput]\n * });\n *\n * // Collect both outputs and print separately.\n * const [denseOut, activationOut] = model.predict(tf.randomNormal([6, 5]));\n * denseOut.print();\n * activationOut.print();\n * ```\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function activation(args: ActivationLayerArgs): Layer {\n  return new Activation(args);\n}\n\n/**\n * Creates a dense (fully connected) layer.\n *\n * This layer implements the operation:\n *   `output = activation(dot(input, kernel) + bias)`\n *\n * `activation` is the element-wise activation function\n *   passed as the `activation` argument.\n *\n * `kernel` is a weights matrix created by the layer.\n *\n * `bias` is a bias vector created by the layer (only applicable if `useBias`\n * is `true`).\n *\n * **Input shape:**\n *\n *   nD `tf.Tensor` with shape: `(batchSize, ..., inputDim)`.\n *\n *   The most common situation would be\n *   a 2D input with shape `(batchSize, inputDim)`.\n *\n * **Output shape:**\n *\n *   nD tensor with shape: `(batchSize, ..., units)`.\n *\n *   For instance, for a 2D input with shape `(batchSize, inputDim)`,\n *   the output would have shape `(batchSize, units)`.\n *\n * Note: if the input to the layer has a rank greater than 2, then it is\n * flattened prior to the initial dot product with the kernel.\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function dense(args: DenseLayerArgs): Layer {\n  return new Dense(args);\n}\n\n/**\n * Applies\n * [dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to\n * the input.\n *\n * Dropout consists in randomly setting a fraction `rate` of input units to 0 at\n * each update during training time, which helps prevent overfitting.\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function dropout(args: DropoutLayerArgs): Layer {\n  return new Dropout(args);\n}\n\n/**\n * Spatial 1D version of Dropout.\n *\n * This Layer type performs the same function as the Dropout layer, but it drops\n * entire 1D feature maps instead of individual elements. For example, if an\n * input example consists of 3 timesteps and the feature map for each timestep\n * has a size of 4, a `spatialDropout1d` layer may zero out the feature maps\n * of the 1st timesteps and 2nd timesteps completely while sparing all feature\n * elements of the 3rd timestep.\n *\n * If adjacent frames (timesteps) are strongly correlated (as is normally the\n * case in early convolution layers), regular dropout will not regularize the\n * activation and will otherwise just result in merely an effective learning\n * rate decrease. In this case, `spatialDropout1d` will help promote\n * independence among feature maps and should be used instead.\n *\n * **Arguments:**\n *   rate: A floating-point number >=0 and <=1. Fraction of the input elements\n *     to drop.\n *\n * **Input shape:**\n *   3D tensor with shape `(samples, timesteps, channels)`.\n *\n * **Output shape:**\n *   Same as the input shape.\n *\n * References:\n *   - [Efficient Object Localization Using Convolutional\n *      Networks](https://arxiv.org/abs/1411.4280)\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function spatialDropout1d(args: SpatialDropout1DLayerConfig): Layer {\n  return new SpatialDropout1D(args);\n}\n\n/**\n * Flattens the input. Does not affect the batch size.\n *\n * A `Flatten` layer flattens each batch in its inputs to 1D (making the output\n * 2D).\n *\n * For example:\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const flattenLayer = tf.layers.flatten();\n * // Inspect the inferred output shape of the flatten layer, which\n * // equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the\n * // flattening. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(flattenLayer.apply(input).shape));\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function flatten(args?: FlattenLayerArgs): Layer {\n  return new Flatten(args);\n}\n\n/**\n * Repeats the input n times in a new dimension.\n *\n * ```js\n *  const model = tf.sequential();\n *  model.add(tf.layers.repeatVector({n: 4, inputShape: [2]}));\n *  const x = tf.tensor2d([[10, 20]]);\n *  // Use the model to do inference on a data point the model hasn't see\n *  model.predict(x).print();\n *  // output shape is now [batch, 2, 4]\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function repeatVector(args: RepeatVectorLayerArgs): Layer {\n  return new RepeatVector(args);\n}\n\n/**\n * Reshapes an input to a certain shape.\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const reshapeLayer = tf.layers.reshape({targetShape: [2, 6]});\n * // Inspect the inferred output shape of the Reshape layer, which\n * // equals `[null, 2, 6]`. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(reshapeLayer.apply(input).shape));\n * ```\n *\n * Input shape:\n *   Arbitrary, although all dimensions in the input shape must be fixed.\n *   Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n *\n * Output shape:\n *   [batchSize, targetShape[0], targetShape[1], ...,\n *    targetShape[targetShape.length - 1]].\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function reshape(args: ReshapeLayerArgs): Layer {\n  return new Reshape(args);\n}\n\n/**\n * Permutes the dimensions of the input according to a given pattern.\n *\n * Useful for, e.g., connecting RNNs and convnets together.\n *\n * Example:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.permute({\n *   dims: [2, 1],\n *   inputShape: [10, 64]\n * }));\n * console.log(model.outputShape);\n * // Now model's output shape is [null, 64, 10], where null is the\n * // unpermuted sample (batch) dimension.\n * ```\n *\n * Input shape:\n *   Arbitrary. Use the configuration field `inputShape` when using this\n *   layer as the first layer in a model.\n *\n * Output shape:\n *   Same rank as the input shape, but with the dimensions re-ordered (i.e.,\n *   permuted) according to the `dims` configuration of this layer.\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function permute(args: PermuteLayerArgs): Layer {\n  return new Permute(args);\n}\n\n/**\n * Maps positive integers (indices) into dense vectors of fixed size.\n * eg. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]\n *\n * **Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.\n *\n * **Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,\n * outputDim]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function embedding(args: EmbeddingLayerArgs): Layer {\n  return new Embedding(args);\n}\n\n// Merge Layers.\n\n/**\n * Layer that performs element-wise addition on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). The inputs are specified as an\n * `Array` when the `apply` method of the `Add` layer instance is called. For\n * example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const addLayer = tf.layers.add();\n * const sum = addLayer.apply([input1, input2]);\n * console.log(JSON.stringify(sum.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function add(args?: LayerArgs): Layer {\n  return new Add(args);\n}\n\n/**\n * Layer that performs element-wise averaging on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const averageLayer = tf.layers.average();\n * const average = averageLayer.apply([input1, input2]);\n * console.log(JSON.stringify(average.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function average(args?: LayerArgs): Layer {\n  return new Average(args);\n}\n\n/**\n * Layer that concatenates an `Array` of inputs.\n *\n * It takes a list of tensors, all of the same shape except for the\n * concatenation axis, and returns a single tensor, the concatenation\n * of all inputs. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 3]});\n * const concatLayer = tf.layers.concatenate();\n * const output = concatLayer.apply([input1, input2]);\n * console.log(JSON.stringify(output.shape));\n * // You get [null, 2, 5], with the first dimension as the undetermined batch\n * // dimension. The last dimension (5) is the result of concatenating the\n * // last dimensions of the inputs (2 and 3).\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function concatenate(args?: ConcatenateLayerArgs): Layer {\n  return new Concatenate(args);\n}\n\n/**\n * Layer that computes the element-wise maximum an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const maxLayer = tf.layers.maximum();\n * const max = maxLayer.apply([input1, input2]);\n * console.log(JSON.stringify(max.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function maximum(args?: LayerArgs): Layer {\n  return new Maximum(args);\n}\n\n/**\n * Layer that computes the element-wise minimum of an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const minLayer = tf.layers.minimum();\n * const min = minLayer.apply([input1, input2]);\n * console.log(JSON.stringify(min.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function minimum(args?: LayerArgs): Layer {\n  return new Minimum(args);\n}\n\n/**\n * Layer that multiplies (element-wise) an `Array` of inputs.\n *\n * It takes as input an Array of tensors, all of the same\n * shape, and returns a single tensor (also of the same shape).\n * For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const input3 = tf.input({shape: [2, 2]});\n * const multiplyLayer = tf.layers.multiply();\n * const product = multiplyLayer.apply([input1, input2, input3]);\n * console.log(product.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function multiply(args?: LayerArgs): Layer {\n  return new Multiply(args);\n}\n\n/**\n * Layer that computes a dot product between samples in two tensors.\n *\n * E.g., if applied to a list of two tensors `a` and `b` both of shape\n * `[batchSize, n]`, the output will be a tensor of shape `[batchSize, 1]`,\n * where each entry at index `[i, 0]` will be the dot product between\n * `a[i, :]` and `b[i, :]`.\n *\n * Example:\n *\n * ```js\n * const dotLayer = tf.layers.dot({axes: -1});\n * const x1 = tf.tensor2d([[10, 20], [30, 40]]);\n * const x2 = tf.tensor2d([[-1, -2], [-3, -4]]);\n *\n * // Invoke the layer's apply() method in eager (imperative) mode.\n * const y = dotLayer.apply([x1, x2]);\n * y.print();\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function dot(args: DotLayerArgs): Layer {\n  return new Dot(args);\n}\n\n// Normalization Layers.\n\n/**\n * Batch normalization layer (Ioffe and Szegedy, 2014).\n *\n * Normalize the activations of the previous layer at each batch,\n * i.e. applies a transformation that maintains the mean activation\n * close to 0 and the activation standard deviation close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does\n *   not include the sample axis) when calling the constructor of this class,\n *   if this layer is used as a first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Batch Normalization: Accelerating Deep Network Training by Reducing\n * Internal Covariate Shift](https://arxiv.org/abs/1502.03167)\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\nexport function batchNormalization(args?: BatchNormalizationLayerArgs): Layer {\n  return new BatchNormalization(args);\n}\n\n/**\n * Layer-normalization layer (Ba et al., 2016).\n *\n * Normalizes the activations of the previous layer for each given example in a\n * batch independently, instead of across a batch like in `batchNormalization`.\n * In other words, this layer applies a transformation that maintanis the mean\n * activation within each example close to0 and activation variance close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the argument `inputShape` when using this layer as the first\n *   layer in a model.\n *\n * Output shape:\n *   Same as input.\n *\n * References:\n *   - [Layer Normalization](https://arxiv.org/abs/1607.06450)\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\nexport function layerNormalization(args?: LayerNormalizationLayerArgs): Layer {\n  return new LayerNormalization(args);\n}\n\n// Padding Layers.\n\n/**\n * Zero-padding layer for 2D input (e.g., image).\n *\n * This layer can add rows and columns of zeros\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, paddedRows, paddedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, paddedRows, paddedCols]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Padding', namespace: 'layers'} */\nexport function zeroPadding2d(args?: ZeroPadding2DLayerArgs): Layer {\n  return new ZeroPadding2D(args);\n}\n\n// Pooling Layers.\n\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape: `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n *\n * `tf.avgPool1d` is an alias.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function averagePooling1d(args: Pooling1DLayerArgs): Layer {\n  return new AveragePooling1D(args);\n}\nexport function avgPool1d(args: Pooling1DLayerArgs): Layer {\n  return averagePooling1d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling1d(args: Pooling1DLayerArgs): Layer {\n  return averagePooling1d(args);\n}\n\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape:\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, rows, cols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, pooleRows, pooledCols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, pooleRows, pooledCols]`\n *\n * `tf.avgPool2d` is an alias.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function averagePooling2d(args: Pooling2DLayerArgs): Layer {\n  return new AveragePooling2D(args);\n}\nexport function avgPool2d(args: Pooling2DLayerArgs): Layer {\n  return averagePooling2d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling2d(args: Pooling2DLayerArgs): Layer {\n  return averagePooling2d(args);\n}\n\n/**\n * Average pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      4D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function averagePooling3d(args: Pooling3DLayerArgs): Layer {\n  return new AveragePooling3D(args);\n}\nexport function avgPool3d(args: Pooling3DLayerArgs): Layer {\n  return averagePooling3d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling3d(args: Pooling3DLayerArgs): Layer {\n  return averagePooling3d(args);\n}\n\n/**\n * Global average pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape:2D tensor with shape: `[batchSize, features]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function globalAveragePooling1d(args?: LayerArgs): Layer {\n  return new GlobalAveragePooling1D(args);\n}\n\n/**\n * Global average pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function globalAveragePooling2d(args: GlobalPooling2DLayerArgs): Layer {\n  return new GlobalAveragePooling2D(args);\n}\n\n/**\n * Global max pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape:2D tensor with shape: `[batchSize, features]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function globalMaxPooling1d(args?: LayerArgs): Layer {\n  return new GlobalMaxPooling1D(args);\n}\n\n/**\n * Global max pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function globalMaxPooling2d(args: GlobalPooling2DLayerArgs): Layer {\n  return new GlobalMaxPooling2D(args);\n}\n\n/**\n * Max pooling operation for temporal data.\n *\n * Input shape:  `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function maxPooling1d(args: Pooling1DLayerArgs): Layer {\n  return new MaxPooling1D(args);\n}\n\n/**\n * Max pooling operation for spatial data.\n *\n * Input shape\n *   - If `dataFormat === CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, rows, cols, channels]`\n *   - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *       `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, pooleRows, pooledCols, channels]`\n *   - If `dataFormat=CHANNEL_FIRST`:\n *       4D tensor with shape:\n *       `[batchSize, channels, pooleRows, pooledCols]`\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function maxPooling2d(args: Pooling2DLayerArgs): Layer {\n  return new MaxPooling2D(args);\n}\n\n/**\n * Max pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      5D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function maxPooling3d(args: Pooling3DLayerArgs): Layer {\n  return new MaxPooling3D(args);\n}\n\n// Recurrent Layers.\n\n/**\n * Gated Recurrent Unit - Cho et al. 2014.\n *\n * This is an `RNN` layer consisting of one `GRUCell`. However, unlike\n * the underlying `GRUCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.gru({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `GRUCell`'s number of units.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function gru(args: GRULayerArgs): Layer {\n  return new GRU(args);\n}\n\n/**\n * Cell class for `GRU`.\n *\n * `GRUCell` is distinct from the `RNN` subclass `GRU` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `GRU` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.gruCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `GRUCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.gruCell({units: 4}),\n *   tf.layers.gruCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `gruCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `GRUCell`, use the\n * `tf.layers.gru`.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function gruCell(args: GRUCellLayerArgs): RNNCell {\n  return new GRUCell(args);\n}\n\n/**\n * Long-Short Term Memory layer - Hochreiter 1997.\n *\n * This is an `RNN` layer consisting of one `LSTMCell`. However, unlike\n * the underlying `LSTMCell`, the `apply` method of `LSTM` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const lstm = tf.layers.lstm({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = lstm.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `LSTMCell`'s number of units.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function lstm(args: LSTMLayerArgs): Layer {\n  return new LSTM(args);\n}\n\n/**\n * Cell class for `LSTM`.\n *\n * `LSTMCell` is distinct from the `RNN` subclass `LSTM` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `LSTM` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.lstmCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `LSTMCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.lstmCell({units: 4}),\n *   tf.layers.lstmCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `lstmCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `LSTMCell`, use the\n * `tf.layers.lstm`.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function lstmCell(args: LSTMCellLayerArgs): RNNCell {\n  return new LSTMCell(args);\n}\n\n/**\n * Fully-connected RNN where the output is to be fed back to input.\n *\n * This is an `RNN` layer consisting of one `SimpleRNNCell`. However, unlike\n * the underlying `SimpleRNNCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.simpleRNN({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `SimpleRNNCell`'s number of units.\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function simpleRNN(args: SimpleRNNLayerArgs): Layer {\n  return new SimpleRNN(args);\n}\n\n/**\n * Cell class for `SimpleRNN`.\n *\n * `SimpleRNNCell` is distinct from the `RNN` subclass `SimpleRNN` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `SimpleRNN` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.simpleRNNCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `SimpleRNNCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.simpleRNNCell({units: 4}),\n *   tf.layers.simpleRNNCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `SimpleRNNCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `SimpleRNNCell`, use the\n * `tf.layers.simpleRNN`.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function simpleRNNCell(args: SimpleRNNCellLayerArgs): RNNCell {\n  return new SimpleRNNCell(args);\n}\n\n/**\n * Base class for recurrent layers.\n *\n * Input shape:\n *   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\n *\n * Output shape:\n *   - if `returnState`, an Array of tensors (i.e., `tf.Tensor`s). The first\n *     tensor is the output. The remaining tensors are the states at the\n *     last time step, each with shape `[batchSize, units]`.\n *   - if `returnSequences`, the output will have shape\n *     `[batchSize, timeSteps, units]`.\n *   - else, the output will have shape `[batchSize, units]`.\n *\n * Masking:\n *   This layer supports masking for input data with a variable number\n *   of timesteps. To introduce masks to your data,\n *   use an embedding layer with the `mask_zero` parameter\n *   set to `True`.\n *\n * Notes on using statefulness in RNNs:\n *   You can set RNN layers to be 'stateful', which means that the states\n *   computed for the samples in one batch will be reused as initial states\n *   for the samples in the next batch. This assumes a one-to-one mapping\n *   between samples in different successive batches.\n *\n *   To enable statefulness:\n *     - specify `stateful: true` in the layer constructor.\n *     - specify a fixed batch size for your model, by passing\n *       if sequential model:\n *         `batchInputShape=[...]` to the first layer in your model.\n *       else for functional model with 1 or more Input layers:\n *         `batchShape=[...]` to all the first layers in your model.\n *       This is the expected shape of your inputs *including the batch size*.\n *       It should be a tuple of integers, e.g. `(32, 10, 100)`.\n *     - specify `shuffle=False` when calling fit().\n *\n *   To reset the states of your model, call `.resetStates()` on either\n *   a specific layer, or on your entire model.\n *\n * Note on specifying the initial state of RNNs\n *   You can specify the initial state of RNN layers symbolically by\n *   calling them with the option `initialState`. The value of\n *   `initialState` should be a tensor or list of tensors representing\n *   the initial state of the RNN layer.\n *\n *   You can specify the initial state of RNN layers numerically by\n *   calling `resetStates` with the keyword argument `states`. The value of\n *   `states` should be a numpy array or list of numpy arrays representing\n *   the initial state of the RNN layer.\n *\n * Note on passing external constants to RNNs\n *   You can pass \"external\" constants to the cell using the `constants`\n *   keyword argument of `RNN.call` method. This requires that the `cell.call`\n *   method accepts the same keyword argument `constants`. Such constants\n *   can be used to conditon the cell transformation on additional static inputs\n *   (not changing over time), a.k.a an attention mechanism.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function rnn(args: RNNLayerArgs): Layer {\n  return new RNN(args);\n}\n\n/**\n * Wrapper allowing a stack of RNN cells to behave as a single cell.\n *\n * Used to implement efficient stacked RNNs.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function stackedRNNCells(args: StackedRNNCellsArgs): RNNCell {\n  return new StackedRNNCells(args);\n}\n\n// Wrapper Layers.\n\n/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */\nexport function bidirectional(args: BidirectionalLayerArgs): Bidirectional {\n  return new Bidirectional(args);\n}\n\n/**\n * This wrapper applies a layer to every temporal slice of an input.\n *\n * The input should be at least 3D,  and the dimension of the index `1` will be\n * considered to be the temporal dimension.\n *\n * Consider a batch of 32 samples, where each sample is a sequence of 10 vectors\n * of 16 dimensions. The batch input shape of the layer is then `[32,  10,\n * 16]`, and the `inputShape`, not including the sample dimension, is\n * `[10, 16]`.\n *\n * You can then use `TimeDistributed` to apply a `Dense` layer to each of the 10\n * timesteps, independently:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.dense({units: 8}),\n *   inputShape: [10, 16],\n * }));\n *\n * // Now model.outputShape = [null, 10, 8].\n * // The output will then have shape `[32, 10, 8]`.\n *\n * // In subsequent layers, there is no need for `inputShape`:\n * model.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})}));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * // Now model.outputShape = [null, 10, 32].\n * ```\n *\n * The output will then have shape `[32, 10, 32]`.\n *\n * `TimeDistributed` can be used with arbitrary layers, not just `Dense`, for\n * instance a `Conv2D` layer.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.conv2d({filters: 64, kernelSize: [3, 3]}),\n *   inputShape: [10, 299, 299, 3],\n * }));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */\nexport function timeDistributed(args: WrapperLayerArgs): Layer {\n  return new TimeDistributed(args);\n}\n\n// Aliases for pooling.\nexport const globalMaxPool1d = globalMaxPooling1d;\nexport const globalMaxPool2d = globalMaxPooling2d;\nexport const maxPool1d = maxPooling1d;\nexport const maxPool2d = maxPooling2d;\n\nexport {Layer, RNN, RNNCell, input /* alias for tf.input */};\n\n/**\n * Apply additive zero-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * This is useful to mitigate overfitting\n * (you could see it as a form of random data augmentation).\n * Gaussian Noise (GS) is a natural choice as corruption process\n * for real valued inputs.\n *\n * # Arguments\n *     stddev: float, standard deviation of the noise distribution.\n *\n * # Input shape\n *         Arbitrary. Use the keyword argument `input_shape`\n *         (tuple of integers, does not include the samples axis)\n *         when using this layer as the first layer in a model.\n *\n * # Output shape\n *         Same shape as input.\n */\n/** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */\nexport function gaussianNoise(args: GaussianNoiseArgs): GaussianNoise {\n  return new GaussianNoise(args);\n}\n\n/**\n * Apply multiplicative 1-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting](\n *      http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\n *\n */\n/** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */\nexport function gaussianDropout(args: GaussianDropoutArgs): GaussianDropout {\n  return new GaussianDropout(args);\n}\n\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n */\n/** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */\nexport function alphaDropout(args: AlphaDropoutArgs): AlphaDropout {\n  return new AlphaDropout(args);\n}\n\n/**\n * Masks a sequence by using a mask value to skip timesteps.\n *\n * If all features for a given sample timestep are equal to `mask_value`,\n * then the sample timestep will be masked (skipped) in all downstream layers\n * (as long as they support masking).\n *\n * If any downstream layer does not support masking yet receives such\n * an input mask, an exception will be raised.\n *\n * Arguments:\n *   - `maskValue`: Either None or mask value to skip.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n */\n/** @doc {heading: 'Layers', subheading: 'Mask', namespace: 'layers'} */\nexport function masking(args?: MaskingArgs): Layer {\n  return new Masking(args);\n}\n"},"lineCount":null}},"error":null,"hash":"da0d0b144d346713ed2dfcfaad1429b2","cacheData":{"env":{}}}